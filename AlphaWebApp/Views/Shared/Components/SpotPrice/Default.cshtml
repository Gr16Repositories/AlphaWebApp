@using System.Globalization
@model IEnumerable<AlphaWebApp.Models.SpotModels.AreaSpotsData>;
@inject IJsonHelper Json;


<div class="container p-4">
    <div>
        <div style="background-color:beige;" style="margin-top:120px;">
            <canvas id="lineChart" style="height:500px;"></canvas>
        </div>
        <br />
        <br />
        <div class="row">
            <div class="col-9">
            <div style="height:40px;" class="text-center p-2">
                <span style="background-color: #E5E4E2; display:inline-block;" class="fw-bold p-2 fs-5"><strong> High:<p id="highValue" style="width:45px;display:inline-block;" class="fw-bold p-2 fs-5"></p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Low:<p id="lowValue" style="width:45px;display:inline-block;" class="fw-bold p-2 fs-5"></p></strong></span>
            </div>
            <br />
            <div class="p-2 text-center" style="margin-top:65px;">
                <button class="btn btn-primary text-md-center fs-5" id="btnSE1" style="width:60px;" onclick="LoadSE1Data();">SE1</button>&nbsp;<button class="btn btn-primary text-md-center fs-5" id="btnSE2" style="width:35px;" onclick="LoadSE2Data();">SE2</button>&nbsp;<button class="btn btn-primary text-md-center fs-5" style="width:35px;" id="btnSE3" onclick="LoadSE3Data();">SE3</button>&nbsp;<button class="btn btn-primary text-md-center fs-5" style="width:35px;" id="btnSE4" onclick="LoadSE4Data();">SE4</button>
            </div>
            </div>
            <div class="col-3">
                <img src="~/img/Sweden_map.png" alt="Sweden Map" style="width:150px;height:200px;">
            </div>
        </div>
        <br />

        <div class="border border-danger border-3 rounded-3">
        <p style="background-color:red;color:white" class="p-2" id="electricityHeader"><strong class="fw-bold fs-5"></strong></p>
        <div class="table-responsive p-3">
            <table class="table" id="table">
                <thead id="tableHead">
                    <tr>
                        <th>Hours</th>
                        <th>00:00</th>
                        <th>01:00</th>
                        <th>02:00</th>
                        <th>03:00</th>
                        <th>04:00</th>
                        <th>05:00</th>
                        <th>06:00</th>
                        <th>07:00</th>
                        <th>08:00</th>
                        <th>09:00</th>
                        <th>10:00</th>
                        <th>11:00</th>
                        <th>12:00</th>
                        <th>13:00</th>
                        <th>14:00</th>
                        <th>15:00</th>
                        <th>16:00</th>
                        <th>17:00</th>
                        <th>18:00</th>
                        <th>19:00</th>
                        <th>20:00</th>
                        <th>21:00</th>
                        <th>22:00</th>
                        <th>23:00</th>
                    </tr>
                </thead>
                <tbody id="tableBody">
                    <tr id="tabel-rows">
                    </tr>
                </tbody>
            </table>
        </div>
        </div>
        <br />
        <div>
            <p class="fs-5 fw-bold">Click here to view to the Historical Spot Prices(High & Low)</p>
            <a id="btnhistory" class="btn btn-primary" data-base-url="@Url.Action("GetAreaPrices","SpotPrice")" ></a>
        </div>

    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.4.1/chart.min.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        LoadSE1Data(true);
        $("#highValue").html(@(((double)ViewBag.SE1High).ToString("0.00", CultureInfo.InvariantCulture)));
        $("#lowValue").html(@(((double)ViewBag.SE1Low).ToString("0.00", CultureInfo.InvariantCulture)));
    });

    let chart;
    function CreateChart(xval, yValues) {
        var ctx = document.getElementById('lineChart').getContext('2d');
        chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: xval,
                datasets: [{
                    label: 'Prices',
                    data: yValues,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    function setData(labels, data) {
        chart.data.labels = labels;
        chart.data.datasets = [{
            label: 'Prices',
            data,
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)'
            ],
            borderWidth: 1
        }];
        chart.update();
    }

    function generateTable(data) {
        const tbRows = document.getElementById("tabel-rows");
        let tbRowsHtml = "<td>Price</td>";
        for (let item of data) {
            tbRowsHtml += `<td>${item}</td>`
        }
        tbRows.innerHTML = tbRowsHtml;
    }

    

    function LoadSE1Data(initialize) {
        let se1Data = @Html.Raw(Json.Serialize(ViewBag.SE1));
        var datapoints = [];
        $.each(se1Data, function (index, item) {
            datapoints.push({ x: new Date(item.dateAndTime), y: item.price, area: item.areaName });
        });

        let xValues = datapoints.map((item) => item.x);
        let xval = xValues.toString().split(',');
        for (var i = 0; i < xval.length; i++) {
            xval[i] = xval[i].substr(16, 2);
        }

        let yValues = datapoints.map((item) => item.y.replace(' ', ''));
        for (var i = 0; i < yValues.length; i++) {
            yValues[i] = ((parseFloat(yValues[i])) / 1000).toFixed(2);
        }
        if (initialize === true)
            CreateChart(xval, yValues);
        else
            setData(xval, yValues);

        $("#highValue").html(@(((double)ViewBag.SE1High).ToString("0.00", CultureInfo.InvariantCulture)));
        $("#lowValue").html(@(((double)ViewBag.SE1Low).ToString("0.00", CultureInfo.InvariantCulture)));
        $("#electricityHeader").html("Luleå Area Electricity Prices(Kilowatt/Hour)");
        const btn = $("#btnhistory");
        btn.html("SE1 History");
        btn.attr("href", `${btn.data("base-url")}?area=SE1`);
        generateTable(datapoints.map((item) => item.y.replace(' ', '')));
    }

    function LoadSE2Data() {
        let se2Data = @Html.Raw(Json.Serialize(ViewBag.SE2));
        var datapoints2 = [];
        $.each(se2Data, function (index, item) {
            datapoints2.push({ x: new Date(item.dateAndTime), y: item.price, area: item.areaName });
        });

        let xValues2 = datapoints2.map((item) => item.x);
        let xval2 = xValues2.toString().split(',');
        for (var i = 0; i < xval2.length; i++) {
            xval2[i] = xval2[i].substr(16, 2);
        }

        let yValues2 = datapoints2.map((item) => item.y.replace(' ', ''));
        for (var i = 0; i < yValues2.length; i++) {
            yValues2[i] = ((parseFloat(yValues2[i])) / 1000).toFixed(2);
        }
        setData(xval2, yValues2);

        $("#highValue").html(@(((double)ViewBag.SE2High).ToString("0.00", CultureInfo.InvariantCulture)));
        $("#lowValue").html(@(((double)ViewBag.SE2Low).ToString("0.00", CultureInfo.InvariantCulture)));
        $("#electricityHeader").html("Sundsvall Area Electricity Prices(Kilowatt/Hour)");
        const btn = $("#btnhistory");
        btn.html("SE2 History");
        btn.attr("href", `${btn.data("base-url")}?area=SE2`);
        generateTable(datapoints2.map((item) => item.y.replace(' ', '')));

    }
    function LoadSE3Data() {
        let se3Data = @Html.Raw(Json.Serialize(ViewBag.SE3));
        var datapoints3 = [];
        $.each(se3Data, function (index, item) {
            datapoints3.push({ x: new Date(item.dateAndTime), y: item.price, area: item.areaName });
        });

        let xValues3 = datapoints3.map((item) => item.x);
        let xval3 = xValues3.toString().split(',');
        for (var i = 0; i < xval3.length; i++) {
            xval3[i] = xval3[i].substr(16, 2);
        }

        let yValues3 = datapoints3.map((item) => item.y.replace(' ', ''));
        for (var i = 0; i < yValues3.length; i++) {
            yValues3[i] = ((parseFloat(yValues3[i])) / 1000).toFixed(2);
        }

        setData(xval3, yValues3);

        $("#highValue").html(@(((double)ViewBag.SE3High).ToString("0.00", CultureInfo.InvariantCulture)));
        $("#lowValue").html(@(((double)ViewBag.SE3Low).ToString("0.00", CultureInfo.InvariantCulture)));
        $("#electricityHeader").html("Stockholm Area Electricity Prices(Kilowatt/Hour)");
         const btn = $("#btnhistory");
        btn.html("SE3 History");
        btn.attr("href", `${btn.data("base-url")}?area=SE3`);
        generateTable(datapoints3.map((item) => item.y.replace(' ', '')));
    }

    function LoadSE4Data() {
        let se4Data = @Html.Raw(Json.Serialize(ViewBag.SE4));
        var datapoints4 = [];
        $.each(se4Data, function (index, item) {
            datapoints4.push({ x: new Date(item.dateAndTime), y: item.price, area: item.areaName });
        });

        let xValues4 = datapoints4.map((item) => item.x);
        let xval4 = xValues4.toString().split(',');
        for (var i = 0; i < xval4.length; i++) {
            xval4[i] = xval4[i].substr(16, 2);
        }

        let yValues4 = datapoints4.map((item) => item.y.replace(' ', ''));
        for (var i = 0; i < yValues4.length; i++) {
            yValues4[i] = ((parseFloat(yValues4[i])) / 1000).toFixed(2);
        }
        setData(xval4, yValues4);

        $("#highValue").html(@(((double)ViewBag.SE4High).ToString("0.00", CultureInfo.InvariantCulture)));
        $("#lowValue").html(@(((double)ViewBag.SE4Low).ToString("0.00", CultureInfo.InvariantCulture)));
        $("#electricityHeader").html("Malmö Area Electricity Prices(Kilowatt/Hour)");
         const btn = $("#btnhistory");
        btn.html("SE4 History");
        btn.attr("href", `${btn.data("base-url")}?area=SE4`);
        generateTable(datapoints4.map((item) => item.y.replace(' ', '')));
    }
</script>


